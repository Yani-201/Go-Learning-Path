// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task-manager-api-clean/domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskUseCase is an autogenerated mock type for the TaskUseCase type
type TaskUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, payload
func (_m *TaskUseCase) Create(c context.Context, payload *domain.TaskInput) (*domain.Task, error) {
	ret := _m.Called(c, payload)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TaskInput) (*domain.Task, error)); ok {
		return rf(c, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.TaskInput) *domain.Task); ok {
		r0 = rf(c, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.TaskInput) error); ok {
		r1 = rf(c, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: c, taskId
func (_m *TaskUseCase) Delete(c context.Context, taskId string) error {
	ret := _m.Called(c, taskId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, taskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: c
func (_m *TaskUseCase) GetAll(c context.Context) (*[]*domain.Task, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *[]*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]*domain.Task, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]*domain.Task); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: c, taskId
func (_m *TaskUseCase) GetById(c context.Context, taskId string) (*domain.Task, error) {
	ret := _m.Called(c, taskId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Task, error)); ok {
		return rf(c, taskId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Task); ok {
		r0 = rf(c, taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, taskId, payload
func (_m *TaskUseCase) Update(c context.Context, taskId string, payload *domain.TaskInput) (*domain.Task, error) {
	ret := _m.Called(c, taskId, payload)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.TaskInput) (*domain.Task, error)); ok {
		return rf(c, taskId, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.TaskInput) *domain.Task); ok {
		r0 = rf(c, taskId, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.TaskInput) error); ok {
		r1 = rf(c, taskId, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskUseCase creates a new instance of TaskUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUseCase {
	mock := &TaskUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
